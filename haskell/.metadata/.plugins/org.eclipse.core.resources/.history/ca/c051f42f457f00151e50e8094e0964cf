module LinkedList (new, next, isNil, datum, toList, fromList, nil, reverseLinkedList) where

--infixr 5 :-:
data LinkedList a = Empty | Cons a (LinkedList a) deriving (Show, Eq, Read, Ord)

new :: a -> LinkedList a -> LinkedList a
new head tail = Cons head tail

next :: LinkedList a -> LinkedList a
next (Cons _ tail) = tail
next Empty = error "next called on Empty"

nil :: LinkedList a
nil = Empty

isNil :: LinkedList a -> Bool
isNil Empty = True
isNil _ = False

datum :: LinkedList a -> a
datum (Cons head _) = head
datum Empty = error "datum called on Empty"

toList = undefined

fromList = undefined

reverseLinkedList :: LinkedList a -> LinkedList a
reverseLinkedList list =
  reverseLoop list Empty
    where
    reverseLoop Empty result = result
    reverseLoop (Cons head tail) result = reverseLoop tail (Cons head result)

