module ETL (transform) where

import Data.Map (Map, empty, foldrWithKey, union)

type Letter = String
type Point = Int
type Letters = [Letter]
type OldScore = (Point,Letters)
type NewScore = (Letter,Point)
type OldScoreFormat = Map Point Letters
type NewScoreFormat = Map Letter Point

transform :: OldScoreFormat -> NewScoreFormat
transform =
  foldrWithKey f empty
  where
    f :: Point -> Letters -> NewScoreFormat -> NewScoreFormat
    f point letters result = union result oldScoreToNewScoreFormat point letters
    oldScoreToNewScoreFormat :: Point -> Letters -> NewScoreFormat
    oldScoreToNewScoreFormat = undefined
